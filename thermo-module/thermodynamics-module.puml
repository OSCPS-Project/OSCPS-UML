@startuml thermodynamics_module_class_diagram

!include ./thermo-packages/ideal-gas-package.puml

enum ThermodynamicConstants {
    + UniversalGasConstant,
    + StandardTemperature,
    + StandardPressure,
    + AvogadroNumber
    --Public Methods--
    + fn value(&self) : Box<dyn std::any::Any> {}
}


Struct StreamThermoState {
  + pressure : Pressure
  + temperature : ThermodynamicTemperature
  + total_mass : Mass
  + total_mole: AmountOfSubstance
  + mass_list : Vec<ComponentData>
  + thermodynamics_package : box<dyn ThermoPackage>
  --Public Methods--
  + fn new() : Self {}
  + fn execute_thermo_calcs(&self) : Self {}
  --Private Methods--
  - fn calc_total_mass(&mut self) -> Mass {}
  - fn calc_total_moles(&mut self) -> AmountOfSubstance {}
  - fn calc_total_volume(&mut self) -> Volume {}
}

Struct ComponentData {
  + chemical_species : Chemical
  + mass_quantity : Mass
  + molar_quantity : AmountOfSubstance
  + vol_quantity : Volume
  + partial_pressure : Pressure
}

Interface ThermoPackage {
    --Mandatory Methods for all Realizations--
    + fn enthalpy(&self) -> Energy
    + fn entropy(&self) -> Energy
    + fn calculate_moles(&self) -> AmountOfSubstance
    + fn pressure(&self) -> Pressure
    + fn temperature(&self) -> ThermodynamicTemperature
    + fn volume(&self) -> Volume
    + fn heat_capacity(&self) -> HeatCapacity
    + fn internal_energy(&self) -> Energy
    + fn gibbs_free_energy(&self) -> Energy
}

StreamThermoState --> ThermoPackage
StreamThermoState --> ComponentData
ThermoPackage --> ThermodynamicConstants

IdealGasPackage ..|> ThermoPackage
IdealGasPackage --> ComponentData

@enduml
